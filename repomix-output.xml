This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
eslint.config.js
index.html
package.json
postcss.config.js
src/App.tsx
src/components/Game.tsx
src/components/Landmark.tsx
src/components/Map.tsx
src/components/ScoreBoard.tsx
src/data/gameData.ts
src/index.css
src/main.tsx
src/types/index.ts
src/utils/helpers.ts
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
vite.config.ts.timestamp-1746989700046-e81f6865a28918.mjs
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="eslint.config.js">
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Country Landmark Challenge</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "d3-geo": "^3.1.0",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "topojson-client": "^3.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/d3-geo": "^3.1.0",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@types/topojson-client": "^3.1.4",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="src/App.tsx">
import React from 'react';
import { Game } from './components/Game';

function App() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-sky-100 to-blue-200 flex items-center justify-center p-4">
      <Game />
    </div>
  );
}

export default App;
</file>

<file path="src/components/Game.tsx">
import React, { useState, useEffect } from 'react';
import { Map } from './Map';
import { Landmark } from './Landmark';
import { ScoreBoard } from './ScoreBoard';
import { gameData as allGameData } from '../data/gameData'; // Renamed to avoid confusion
import { shuffle } from '../utils/helpers';
import { Trophy } from 'lucide-react';

// Define level configuration: number of questions per level
const LEVEL_CONFIG = [
  { count: 10, name: 'Level 1' },
  { count: 25, name: 'Level 2' }, // Note: Requires total of 10 + 25 = 35 questions
  { count: 40, name: 'Level 3' }, // Note: Requires total of 35 + 40 = 75 questions
  // Add more levels as needed, with higher counts
];

// Calculate cumulative question counts for easier level progression tracking
const cumulativeQuestions = LEVEL_CONFIG.reduce((acc, level, index) => {
    const previousTotal = index > 0 ? acc[index - 1] : 0;
    acc.push(previousTotal + level.count);
    return acc;
}, [] as number[]);

export const Game: React.FC = () => {
  // Use state to hold the shuffled list of ALL available game data
  const [shuffledGameData, setShuffledGameData] = useState(shuffle([...allGameData]));
  // State to track the index of the current question in the shuffled list
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  // State to track the current level
  const [currentLevel, setCurrentLevel] = useState(0);
  // State to track the player's total score
  const [score, setScore] = useState(0);
  // State to track countries correctly identified
  const [revealedCountries, setRevealedCountries] = useState<string[]>([]);
  // State for feedback messages
  const [feedback, setFeedback] = useState<{ status: 'correct' | 'incorrect' | null, message: string }>({
    status: null,
    message: ''
  });
  // State to track if the game is over
  const [gameOver, setGameOver] = useState(false);
  // State to potentially show level complete message
  const [levelComplete, setLevelComplete] = useState(false);


  // Calculate details for the current level
  const questionsAnsweredBeforeThisLevel = currentLevel > 0 ? cumulativeQuestions[currentLevel - 1] : 0;
  const totalQuestionsInCurrentLevel = LEVEL_CONFIG[currentLevel].count;
  // Index in the shuffled list where the current level ends
  const currentLevelEndIndex = cumulativeQuestions[currentLevel] - 1;
  // The current question number within the current level (1-based index)
  const currentQuestionNumberInLevel = (currentQuestionIndex - questionsAnsweredBeforeThisLevel) + 1;

  // Get the current landmark data based on the global question index
  const currentLandmark = shuffledGameData[currentQuestionIndex];

  // Check if there are enough questions in gameData for the next potential level
  const canAdvanceToNextLevel = (currentLevel + 1) < LEVEL_CONFIG.length &&
                                allGameData.length >= cumulativeQuestions[currentLevel + 1];

  const handleCountryClick = (country: string) => {
    // Prevent interaction if game is over, country already revealed, or feedback is showing
    if (gameOver || revealedCountries.includes(country) || feedback.status !== null || levelComplete) {
      return;
    }

    if (country === currentLandmark.country) {
      setScore(prevScore => prevScore + 1);
      setRevealedCountries(prev => [...prev, country]);
      setFeedback({
        status: 'correct',
        message: `Correct! ${currentLandmark.landmark} is in ${country}.`
      });

      // Determine if this was the last question of the current level
      const isEndOfCurrentLevel = currentQuestionIndex === currentLevelEndIndex;

      // Wait for feedback duration before proceeding
      setTimeout(() => {
        setFeedback({ status: null, message: '' }); // Clear feedback

        if (isEndOfCurrentLevel) {
          // Completed the current level
          if (canAdvanceToNextLevel) {
            // Enough data and config for the next level
            setLevelComplete(true); // Show level complete message briefly
            setCurrentLevel(prevLevel => prevLevel + 1); // Advance level
            // currentQuestionIndex will be incremented below, moving to the start of the next level

            // Hide level complete message after a delay
            setTimeout(() => {
              setLevelComplete(false);
              setCurrentQuestionIndex(prevIndex => prevIndex + 1); // Move to the first question of the next level
            }, 2000); // Show level complete for 2 seconds

          } else {
            // No more levels or not enough data for the next level - Game Over
            setGameOver(true);
          }
        } else {
          // Not the end of the level, just move to the next question
          setCurrentQuestionIndex(prevIndex => prevIndex + 1);
        }
      }, 1500); // Duration to show correct feedback

    } else {
      // Incorrect guess
      setFeedback({
        status: 'incorrect',
        message: `Incorrect. Try again!` // Or maybe reveal the correct country here?
      });

      // Wait for feedback duration before clearing feedback
      setTimeout(() => {
        setFeedback({ status: null, message: '' });
      }, 1500); // Duration to show incorrect feedback
    }
  };

  const restartGame = () => {
    setShuffledGameData(shuffle([...allGameData]));
    setCurrentQuestionIndex(0);
    setCurrentLevel(0);
    setScore(0);
    setRevealedCountries([]);
    setFeedback({ status: null, message: '' });
    setGameOver(false);
    setLevelComplete(false);
  };

  // --- Render Logic ---

  // --- Game Over State ---
  if (gameOver) {
    // Determine the highest level reached for the game over message
    const completedLevelIndex = currentLevel; // If game over, it's after attempting this level
    const completedLevelName = LEVEL_CONFIG[completedLevelIndex]?.name || `Level ${completedLevelIndex + 1}`;

    return (
      <div className="w-full max-w-4xl bg-white rounded-2xl shadow-xl overflow-hidden transition-all duration-500 animate-fade-in">
        <div className="p-12 text-center bg-gradient-to-b from-blue-50 to-white">
          <div className="mb-8 flex justify-center">
            <Trophy size={80} className="text-yellow-500 drop-shadow-lg" />
          </div>
          <h1 className="text-4xl md:text-5xl font-bold text-gray-800 mb-6">Game Over!</h1>
          <p className="text-2xl text-gray-600 mb-8">
             {/* Adjust message based on whether a level was completed */}
            You completed {completedLevelName} and scored <span className="font-bold text-blue-600">{score}</span> total points!
          </p>
           {/* Add a message if more data is needed for higher levels */}
           {!canAdvanceToNextLevel && LEVEL_CONFIG.length > currentLevel + 1 && allGameData.length < cumulativeQuestions[currentLevel + 1] && (
                <p className="text-lg text-gray-500 mb-8">Add more landmark data to unlock higher levels!</p>
           )}
          <button
            onClick={restartGame}
            className="px-8 py-4 bg-blue-600 text-white text-lg font-medium rounded-xl shadow-lg hover:bg-blue-700 transition-all duration-300 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            Play Again
          </button>
        </div>
      </div>
    );
  }

  // --- Level Complete Message (Temporary Overlay) ---
   if (levelComplete) {
       return (
            <div className="w-full max-w-4xl bg-white rounded-2xl shadow-xl overflow-hidden transition-all duration-500 animate-fade-in">
                <div className="p-12 text-center bg-gradient-to-b from-green-50 to-white">
                    <h1 className="text-4xl md:text-5xl font-bold text-green-700 mb-6">Level {currentLevel} Complete!</h1>
                    <p className="text-xl text-gray-600">Getting ready for {LEVEL_CONFIG[currentLevel]?.name}...</p>
                </div>
            </div>
       );
   }


  // --- Main Game UI ---
  return (
    <div className="w-full max-w-6xl bg-white rounded-2xl shadow-xl overflow-hidden transition-all duration-500 flex flex-col">

      {/* Top section for the Map */}
      <div className="flex-grow relative w-full overflow-hidden rounded-t-2xl">
         <Map
          onCountryClick={handleCountryClick}
          revealedCountries={revealedCountries}
          correctCountry={currentLandmark?.country} // Pass correct country
         />
      </div>

      {/* Bottom section for Landmark and ScoreBoard */}
      <div className="p-8 md:p-10 grid grid-cols-1 md:grid-cols-2 gap-8">
         {/* Landmark Component - Only render if currentLandmark is available */}
        {currentLandmark && (
             <Landmark
                landmark={currentLandmark}
                feedback={feedback}
             />
        )}


        {/* ScoreBoard Component */}
        <ScoreBoard
          score={score}
          // Pass level-specific question numbers and total for the level
          currentQuestion={currentQuestionNumberInLevel}
          totalQuestions={totalQuestionsInCurrentLevel}
          level={currentLevel + 1} // Pass 1-based level number
        />
      </div>
    </div>
  );
};
</file>

<file path="src/components/Landmark.tsx">
import React from 'react';
import { LandmarkData } from '../types';
import { MapPin } from 'lucide-react';

interface LandmarkProps {
  landmark: LandmarkData;
  feedback: { status: 'correct' | 'incorrect' | null, message: string };
}

export const Landmark: React.FC<LandmarkProps> = ({ landmark, feedback }) => {
  let feedbackClasses = '';
  
  if (feedback.status === 'correct') {
    feedbackClasses = 'bg-green-100 border-green-500 text-green-700';
  } else if (feedback.status === 'incorrect') {
    feedbackClasses = 'bg-red-100 border-red-500 text-red-700';
  }

  return (
    <div className="relative flex flex-col h-full">
      <div className="relative overflow-hidden rounded-lg h-[200px] md:h-[300px] bg-gray-100">
        <img
          src={landmark.imageUrl}
          alt={`Landmark`}
          className="w-full h-full object-cover"
        />
        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4">
          <div className="flex items-center text-white">
            <MapPin size={20} className="mr-2" />
            <h3 className="text-lg font-semibold">{landmark.landmark}</h3>
          </div>
        </div>
      </div>
      
      <div className="mt-4">
        <h3 className="text-xl font-semibold text-gray-800 mb-2">Which country is this landmark in?</h3>
        
        {feedback.message && (
          <div className={`mt-4 p-3 border rounded-lg ${feedbackClasses} transition-all duration-300`}>
            {feedback.message}
          </div>
        )}
      </div>
    </div>
  );
};
</file>

<file path="src/components/Map.tsx">
import React, { useState, useEffect, useRef } from 'react';
import { geoMercator, geoPath } from 'd3-geo';
import { feature } from 'topojson-client';
import { CountryFeature } from '../types';
import { ZoomIn, ZoomOut, Maximize2 } from 'lucide-react';

interface MapProps {
  onCountryClick: (country: string) => void;
  revealedCountries: string[];
  correctCountry: string; // Keep this for potential future feedback on incorrect guesses
}

const WORLD_TOPOJSON_URL = 'https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json';

export const Map: React.FC<MapProps> = ({
  onCountryClick,
  revealedCountries,
  correctCountry
}) => {
  const [worldData, setWorldData] = useState<CountryFeature[] | null>(null);
  const [hoveredCountry, setHoveredCountry] = useState<string | null>(null);
  const [scale, setScale] = useState(120);
  const svgRef = useRef<SVGSVGElement>(null);

  useEffect(() => {
    fetch(WORLD_TOPOJSON_URL)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(topology => {
        // The 'countries' object name depends on the topojson file. 110m has 'countries'.
        if (!topology.objects || !topology.objects.countries) {
           console.error("TopoJSON does not contain 'countries' object.");
           setWorldData([]); // Set to empty to show map area but no countries
           return;
        }
        const countries = feature(topology, topology.objects.countries);
        setWorldData(countries.features as CountryFeature[]);
      })
      .catch(error => {
        console.error("Error loading world map data:", error);
        setWorldData([]); // Handle error by showing empty map area
      });
  }, []);

  const width = 800;
  const height = 400; // Keep this intrinsic SVG aspect ratio

  const handleZoomIn = () => {
    setScale(prev => Math.min(prev * 1.3, 800)); // Increased zoom factor and max scale
  };

  const handleZoomOut = () => {
    setScale(prev => Math.max(prev / 1.3, 80)); // Adjusted zoom factor and min scale
  };

  const handleReset = () => {
    setScale(120); // Reset scale
  };

  // Use the full available width/height of the container for the projection
  // Adjust translate slightly if needed for centering
  const projection = geoMercator()
    .scale(scale)
    .translate([width / 2, height / 1.5]); // Adjusted vertical centering slightly


  const path = geoPath().projection(projection);

  // Add loading state visual
  if (!worldData && worldData !== []) {
     return (
  
      <div className="relative w-full h-[400px] md:h-[500px] rounded-t-2xl overflow-hidden bg-gradient-to-b from-blue-50 to-white shadow-lg flex items-center justify-center text-gray-600">
         Loading map...
      </div>
     );
  }

  // Add error state visual
  if (worldData && worldData.length === 0) {
     return (
      // Use classes to match the desired container look
      <div className="relative w-full h-[400px] md:h-[500px] rounded-t-2xl overflow-hidden bg-gradient-to-b from-blue-50 to-white shadow-lg flex items-center justify-center text-red-600">
         Error loading map data.
      </div>
     );
  }


  return (
    // Main Map container - ensure it takes up the required height and has rounded corners
    // This div gets its rounded-t-2xl from the parent in Game.tsx
    <div className="relative w-full h-full overflow-hidden bg-gradient-to-b from-blue-50 to-white">
      {/* Controls and Title */}
      <div className="absolute top-0 left-0 right-0 p-4 z-10 flex justify-between items-center"> {/* Added z-10 to ensure controls are above map paths */}
          <h2 className="text-xl font-semibold text-gray-800 drop-shadow">Click on the correct country</h2> {/* Added drop-shadow for readability */}
          <div className="flex gap-2">
            <button
              onClick={handleZoomIn}
              className="p-2 bg-white rounded-lg shadow-sm hover:bg-gray-50 transition-colors"
              title="Zoom in"
              aria-label="Zoom in" // Added for accessibility
            >
              <ZoomIn size={20} className="text-gray-600" />
            </button>
            <button
              onClick={handleZoomOut}
              className="p-2 bg-white rounded-lg shadow-sm hover:bg-gray-50 transition-colors"
              title="Zoom out"
              aria-label="Zoom out" // Added for accessibility
            >
              <ZoomOut size={20} className="text-gray-600" />
            </button>
            <button
              onClick={handleReset}
              className="p-2 bg-white rounded-lg shadow-sm hover:bg-gray-50 transition-colors"
              title="Reset zoom"
              aria-label="Reset zoom" // Added for accessibility
            >
              <Maximize2 size={20} className="text-gray-600" />
            </button>
          </div>
        </div>

      {/* SVG Container */}
      {/* This inner div holds the SVG and ensures it fits within the outer container */}
      <div className="relative w-full h-full overflow-hidden">
        <svg
          ref={svgRef}
          viewBox={`0 0 ${width} ${height}`}
          className="w-full h-full" // SVG itself should fill its container
        >
          {worldData.map((country, i) => {
            const isRevealed = revealedCountries.includes(country.properties.name);
            const isHovered = hoveredCountry === country.properties.name;
            // Optional: Add a class for the correct country when feedback is 'incorrect'
            // const isCorrectCountryOnIncorrectGuess = feedback.status === 'incorrect' && country.properties.name === correctCountry;

            let fill = '#e5e7eb'; // default gray
            if (isRevealed) {
                fill = '#22c55e'; // green for revealed
            } else if (isHovered) {
                 fill = '#60a5fa'; // blue for hovered
            }
            // if (isCorrectCountryOnIncorrectGuess) {
            //     fill = '#f97316'; // orange, for example
            // }


            return (
              <path
                key={i}
                d={path(country) || ''}
                fill={fill} // Use the calculated fill color
                stroke="#fff"
                strokeWidth="0.5"
                className="transition-colors duration-200 cursor-pointer hover:opacity-80"
                onClick={() => onCountryClick(country.properties.name)}
                onMouseEnter={() => setHoveredCountry(country.properties.name)}
                onMouseLeave={() => setHoveredCountry(null)}
                aria-label={country.properties.name} // Added for accessibility
              />
            );
          })}
        </svg>
      </div>

      {/* Hovered Country Tooltip */}
      {hoveredCountry && !revealedCountries.includes(hoveredCountry) && ( // Only show if not revealed yet
        <div className="absolute bottom-6 left-6 bg-black bg-opacity-75 text-white text-sm px-4 py-2 rounded-full shadow-lg backdrop-blur-sm z-20"> {/* Added z-20 to be above controls */}
          {hoveredCountry}
        </div>
      )}
    </div>
  );
};
</file>

<file path="src/components/ScoreBoard.tsx">
import React from 'react';
import { Globe } from 'lucide-react';

interface ScoreBoardProps {
  score: number;
  totalQuestions: number; // Total questions in the *current* level
  currentQuestion: number; // Current question number *within* the current level
  level: number; // The current level number (e.g., 1, 2, 3)
}

// Define styles as JavaScript objects (keeping the previous inline styles)
const containerStyle: React.CSSProperties = {
    backgroundColor: '#1d4ed8', // Corresponds to Tailwind's blue-700
    color: '#fff', // text-white
    padding: '1rem', // p-4 (16px)
    borderRadius: '0.5rem', // rounded-lg (8px)
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)', // Simplified shadow-md
    width: '100%', // Take full width of its grid column
    boxSizing: 'border-box', // Include padding in width
    display: 'flex', // Ensure flex layout for inner content
    flexDirection: 'column', // Stack content vertically if needed, though justify-between makes it horizontal
    justifyContent: 'space-between', // Title/Level on left, numbers on right
    alignItems: 'center', // Center vertically
};

const flexRowBetweenCenter: React.CSSProperties = {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '100%', // Ensure inner flex takes full width
};

const flexCenter: React.CSSProperties = {
    display: 'flex',
    alignItems: 'center',
};

const globeIconStyle: React.CSSProperties = {
    marginRight: '0.75rem', // mr-3 (12px)
    opacity: 0.9, // opacity-90
};

// Style for the main title and level container on the left
const titleAndLevelStyle: React.CSSProperties = {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center', // Vertically center text if heights differ
};

const titleStyle: React.CSSProperties = {
    fontSize: '1.25rem', // text-xl
    fontWeight: 'bold',
};

const levelStyle: React.CSSProperties = {
    fontSize: '0.875rem', // text-sm
    fontWeight: '500',
    opacity: 0.9,
    marginTop: '0.25rem', // Small gap between title and level
};


const rightSectionStyle: React.CSSProperties = {
    display: 'flex',
    alignItems: 'center',
    gap: '1.5rem', // space-x-6 (24px) - using gap for spacing in flex container
    color: 'rgba(255, 255, 255, 0.9)', // text-white/90
};

const textCenterStyle: React.CSSProperties = {
    textAlign: 'center',
};

const labelStyle: React.CSSProperties = {
    fontSize: '0.875rem', // text-sm (14px)
    textTransform: 'uppercase',
    fontWeight: '500', // font-medium
    opacity: 0.8, // opacity-80
};

const valueStyle: React.CSSProperties = {
    fontSize: '1.25rem', // text-xl (20px)
    fontWeight: 'bold',
};


export const ScoreBoard: React.FC<ScoreBoardProps> = ({
  score,
  totalQuestions,
  currentQuestion,
  level
}) => {
  return (
    <div style={containerStyle}>
      {/* Inner flex container for main layout */}
      <div style={flexRowBetweenCenter}>
        {/* Left side: Icon, Title, and Level */}
        <div style={flexCenter}>
           <Globe size={28} style={globeIconStyle} />
           <div style={titleAndLevelStyle}>
             <h1 style={titleStyle}>Country Landmark Challenge</h1>
             <p style={levelStyle}>Level {level}</p> {/* Display current level */}
           </div>
        </div>

        {/* Right side: Question and Score */}
        <div style={rightSectionStyle}>
          {/* Question Display (within current level) */}
          <div style={textCenterStyle}>
            <p style={labelStyle}>Question</p>
            {/* Display current question number within the level */}
            <p style={valueStyle}>{currentQuestion} / {totalQuestions}</p>
          </div>

          {/* Score Display (total score) */}
          <div style={textCenterStyle}>
            <p style={labelStyle}>Score</p>
            <p style={valueStyle}>{score}</p>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/data/gameData.ts">
import { LandmarkData } from '../types';

export const gameData: LandmarkData[] = [
  // --- Level 1 Data (Original 10) ---
  {
    id: 1,
    landmark: 'Eiffel Tower',
    country: 'France',
    imageUrl: 'https://images.pexels.com/photos/460740/pexels-photo-460740.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    hint: 'This iconic iron tower is located in the capital city of a European country known for its cuisine.'
  },
  {
    id: 2,
    landmark: 'Statue of Liberty',
    country: 'United States of America',
    imageUrl: 'https://images.pexels.com/photos/356844/pexels-photo-356844.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'This copper statue was a gift from France and stands on Liberty Island.'
  },
  {
    id: 3,
    landmark: 'Taj Mahal',
    country: 'India',
    imageUrl: 'https://images.pexels.com/photos/1603650/pexels-photo-1603650.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'This white marble mausoleum was built by an emperor in memory of his wife.'
  },
  {
    id: 4,
    landmark: 'Great Wall',
    country: 'China',
    imageUrl: 'https://images.pexels.com/photos/2412603/pexels-photo-2412603.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    hint: 'This massive defensive structure spans thousands of miles across an Asian country.'
  },
  {
    id: 5,
    landmark: 'Colosseum',
    country: 'Italy',
    imageUrl: 'https://images.pexels.com/photos/532263/pexels-photo-532263.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'This ancient amphitheater in a European capital was used for gladiatorial contests.'
  },
  {
    id: 6,
    landmark: 'Christ the Redeemer',
    country: 'Brazil',
    imageUrl: 'https://images.pexels.com/photos/2818895/pexels-photo-2818895.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    hint: 'This art deco statue of Jesus Christ overlooks a South American city known for its carnival.'
  },
  {
    id: 7,
    landmark: 'Machu Picchu',
    country: 'Peru',
    imageUrl: 'https://images.pexels.com/photos/2929906/pexels-photo-2929906.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    hint: 'This 15th-century Inca citadel is located in the Eastern Cordillera of southern South America.'
  },
  {
    id: 8,
    landmark: 'Pyramids of Giza',
    country: 'Egypt',
    imageUrl: 'https://images.pexels.com/photos/7566890/pexels-photo-7566890.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    hint: 'These ancient structures were built as tombs for pharaohs in a North African country.'
  },
  {
    id: 9,
    landmark: 'Sydney Opera House',
    country: 'Australia',
    imageUrl: 'https://images.pexels.com/photos/1878293/pexels-photo-1878293.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'This performing arts center features distinctive sail-shaped shells.'
  },
  {
    id: 10,
    landmark: 'Big Ben',
    country: 'United Kingdom',
    imageUrl: 'https://images.pexels.com/photos/77171/pexels-photo-77171.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'This famous clock tower is part of the Palace of Westminster in a European capital city.'
  },

  // --- Level 2 Data (25 New Entries) ---
  {
    id: 11,
    landmark: 'Brandenburg Gate',
    country: 'Germany',
    imageUrl: 'https://images.pexels.com/photos/2570063/pexels-photo-2570063.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    hint: 'An 18th-century neoclassical monument in Berlin.'
  },
  {
    id: 12,
    landmark: 'Sagrada Familia',
    country: 'Spain',
    imageUrl: 'https://images.pexels.com/photos/819764/pexels-photo-819764.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    hint: 'A large unfinished Roman Catholic minor basilica in Barcelona, designed by Antoni Gaudí.'
  },
  {
    id: 13,
    landmark: 'CN Tower',
    country: 'Canada',
    imageUrl: 'https://images.pexels.com/photos/21389/pexels-photo.jpg?auto=compress&cs=tinysrgb&w=600',
    hint: 'A 553.3 m-high concrete observation tower in Downtown Toronto.'
  },
  {
    id: 14,
    landmark: 'Chichen Itza',
    country: 'Mexico',
    imageUrl: 'https://images.pexels.com/photos/3591074/pexels-photo-3591074.jpeg?auto=compress&cs=tinysrgb&w=600',
    hint: 'A large pre-Columbian city built by the Maya people in the Yucatán Peninsula.'
  },
  {
    id: 15,
    landmark: 'Fushimi Inari Shrine',
    country: 'Japan',
    imageUrl: 'https://images.pexels.com/photos/19474885/pexels-photo-19474885/free-photo-of-gyeongbokgung-palace-in-seoul.jpeg?auto=compress&cs=tinysrgb&w=600',
    hint: 'An important Shinto shrine in southern Kyoto, famous for its thousands of red torii gates.'
  },
   {
    id: 16,
    landmark: 'Gyeongbokgung Palace',
    country: 'South Korea',
    imageUrl: 'https://images.pexels.com/photos/2081345/pexels-photo-2081345.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'The main royal palace of the Joseon dynasty, located in Seoul.'
  },
   {
    id: 17,
    landmark: 'Wat Arun',
    country: 'Thailand',
    imageUrl: 'https://images.pexels.com/photos/11104877/pexels-photo-11104877.jpeg?auto=compress&cs=tinysrgb&w=600',
    hint: 'A Buddhist temple (wat) in Bangkok Yai district of Bangkok, on the Thonburi west bank of the Chao Phraya River.'
  },
   {
    id: 18,
    landmark: 'Hagia Sophia',
    country: 'Turkey',
    imageUrl: 'https://images.pexels.com/photos/31979451/pexels-photo-31979451/free-photo-of-inside-hagia-sophia-with-people-and-chandelier.jpeg?auto=compress&cs=tinysrgb&w=600',
    hint: 'A former architectural tour de force located in Istanbul.'
  },
   {
    id: 19,
    landmark: 'Acropolis of Athens',
    country: 'Greece',
    imageUrl: 'https://images.pexels.com/photos/14557270/pexels-photo-14557270.jpeg?auto=compress&cs=tinysrgb&w=600',
    hint: 'An ancient citadel located on a rocky outcrop above the city of Athens.'
  },
   {
    id: 20,
    landmark: 'Kinderdijk Windmills',
    country: 'Netherlands',
    imageUrl: 'https://images.pexels.com/photos/313746/pexels-photo-313746.jpeg?auto=compress&cs=tinysrgb&w=600',
    hint: 'A UNESCO World Heritage site featuring a network of windmills near Rotterdam.'
  },
   {
    id: 21,
    landmark: 'Matterhorn',
    country: 'Switzerland',
    imageUrl: 'https://images.pexels.com/photos/267104/pexels-photo-267104.jpeg?auto=compress&cs=tinysrgb&w=600',
    hint: 'A mountain of the Alps, straddling the border between Switzerland and Italy.'
  },
   {
    id: 22,
    landmark: 'Milford Sound',
    country: 'New Zealand',
    imageUrl: 'https://images.pexels.com/photos/4444290/pexels-photo-4444290.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'A fjord in the southwest of New Zealand\'s South Island.'
  },
   {
    id: 23,
    landmark: 'Table Mountain',
    country: 'South Africa',
    imageUrl: 'https://images.pexels.com/photos/259447/pexels-photo-259447.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'A flat-topped mountain overlooking the city of Cape Town.'
  },
   {
    id: 24,
    landmark: 'Maasai Mara',
    country: 'Kenya', // Or Tanzania, as the migration crosses borders
    imageUrl: 'https://images.pexels.com/photos/12334810/pexels-photo-12334810.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'A large national game reserve in Narok County, Kenya, famous for the Great Migration.'
  },
   {
    id: 25,
    landmark: 'Perito Moreno Glacier',
    country: 'Argentina',
    imageUrl: 'https://images.pexels.com/photos/4346849/pexels-photo-4346849.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'A glacier located in the Los Glaciares National Park in southwest Santa Cruz Province, Argentina.'
  },
   {
    id: 26,
    landmark: 'Moai (Easter Island)',
    country: 'Chile',
    imageUrl: 'https://images.pexels.com/photos/14596489/pexels-photo-14596489.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'Monolithic human figures carved by the Rapa Nui people on a Polynesian island.'
  },
   {
    id: 27,
    landmark: 'St. Basil\'s Cathedral',
    country: 'Russia',
    imageUrl: 'https://images.pexels.com/photos/8285167/pexels-photo-8285167.jpeg?auto=compress&cs=tinysrgb&w=300',
    hint: 'A church in Red Square in Moscow, known for its colorful onion domes.'
  },
   {
    id: 28,
    landmark: 'Geirangerfjord',
    country: 'Norway',
    imageUrl: 'https://images.pexels.com/photos/6272372/pexels-photo-6272372.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'A UNESCO World Heritage site and one of Norway\'s most visited tourist sites.'
  },
   {
    id: 29,
    landmark: 'Blue Lagoon',
    country: 'Iceland',
    imageUrl: 'https://images.pexels.com/photos/2253821/pexels-photo-2253821.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'A geothermal spa located in a lava field near Grindavík on the Reykjanes Peninsula.'
  },
   {
    id: 30,
    landmark: 'Cliffs of Moher',
    country: 'Ireland',
    imageUrl: 'https://images.pexels.com/photos/2382681/pexels-photo-2382681.jpeg?auto=compress&cs=tinysrgb&w=300',
    hint: 'Sea cliffs located at the southwestern edge of the Burren region in County Clare.'
  },
   {
    id: 31,
    landmark: 'Belém Tower',
    country: 'Portugal',
    imageUrl: 'https://images.pexels.com/photos/461936/pexels-photo-461936.jpeg?auto=compress&cs=tinysrgb&w=300',
    hint: 'A 16th-century fortification in Lisbon, a UNESCO World Heritage site.'
  },
   {
    id: 32,
    landmark: 'Wawel Castle',
    country: 'Poland',
    imageUrl: 'https://images.pexels.com/photos/27034310/pexels-photo-27034310/free-photo-of-tower-of-traditional-castle.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'A castle residency in Kraków that served as the seat of Polish kings.'
  },
   {
    id: 33,
    landmark: 'Vasa Museum',
    country: 'Sweden',
    imageUrl: 'https://images.pexels.com/photos/31979451/pexels-photo-31979451/free-photo-of-inside-hagia-sophia-with-people-and-chandelier.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'A maritime museum in Stockholm that houses the almost fully intact 17th-century ship Vasa.'
  },
   {
    id: 34,
    landmark: 'Schönbrunn Palace',
    country: 'Austria',
    imageUrl: 'https://images.pexels.com/photos/389865/pexels-photo-389865.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'A former imperial summer residence in Vienna.'
  },
   {
    id: 35,
    landmark: 'Borobudur Temple',
    country: 'Indonesia',
    imageUrl: 'https://images.pexels.com/photos/8775531/pexels-photo-8775531.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    hint: 'A 9th-century Mahayana Buddhist temple in Central Java.'
  },
];
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);
</file>

<file path="src/types/index.ts">
export interface LandmarkData {
  id: number;
  landmark: string;
  country: string;
  imageUrl: string;
  hint: string;
}

export interface CountryData {
  id: number;
  name: string;
  position: {
    x: number;
    y: number;
  };
  size: number;
}

export interface CountryFeature {
  type: string;
  properties: {
    name: string;
  };
  geometry: {
    type: string;
    coordinates: number[][][];
  };
}
</file>

<file path="src/utils/helpers.ts">
/**
 * Shuffle an array using the Fisher-Yates algorithm
 */
export function shuffle<T>(array: T[]): T[] {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
});
</file>

<file path="vite.config.ts.timestamp-1746989700046-e81f6865a28918.mjs">
// vite.config.ts
import { defineConfig } from "file:///home/project/node_modules/vite/dist/node/index.js";
import react from "file:///home/project/node_modules/@vitejs/plugin-react/dist/index.mjs";
var vite_config_default = defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ["lucide-react"]
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvaG9tZS9wcm9qZWN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9wcm9qZWN0L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9ob21lL3Byb2plY3Qvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJztcbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCc7XG5cbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBwbHVnaW5zOiBbcmVhY3QoKV0sXG4gIG9wdGltaXplRGVwczoge1xuICAgIGV4Y2x1ZGU6IFsnbHVjaWRlLXJlYWN0J10sXG4gIH0sXG59KTtcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBeU4sU0FBUyxvQkFBb0I7QUFDdFAsT0FBTyxXQUFXO0FBR2xCLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFBQSxFQUNqQixjQUFjO0FBQUEsSUFDWixTQUFTLENBQUMsY0FBYztBQUFBLEVBQzFCO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
</file>

</files>
