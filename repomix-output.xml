This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
eslint.config.js
index.html
package.json
postcss.config.js
src/App.tsx
src/components/Game.tsx
src/components/Landmark.tsx
src/components/Map.tsx
src/components/ScoreBoard.tsx
src/data/gameData.ts
src/index.css
src/main.tsx
src/types/index.ts
src/utils/helpers.ts
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
vite.config.ts.timestamp-1746989700046-e81f6865a28918.mjs
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="eslint.config.js">
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Country Landmark Challenge</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="src/App.tsx">
import React from 'react';
import { Game } from './components/Game';

function App() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-sky-100 to-blue-200 flex items-center justify-center p-4">
      <Game />
    </div>
  );
}

export default App;
</file>

<file path="src/components/Game.tsx">
import React, { useState, useEffect, useCallback } from 'react';
import { Map } from './Map';
import { Landmark } from './Landmark';
import { ScoreBoard } from './ScoreBoard';
import { gameData as allGameData } from '../data/gameData';
import { shuffle } from '../utils/helpers';
import { LandmarkData } from '../types'; // Ensure LandmarkData is imported
import { Trophy, HelpCircle } from 'lucide-react';

// Define level configuration: number of questions per level
const LEVEL_CONFIG = [
  { count: 10, name: 'Level 1' },
  { count: 25, name: 'Level 2' },
  { count: 40, name: 'Level 3' },
];

const cumulativeQuestions = LEVEL_CONFIG.reduce((acc, level, index) => {
    const previousTotal = index > 0 ? acc[index - 1] : 0;
    acc.push(previousTotal + level.count);
    return acc;
}, [] as number[]);

// Define Hint Types
export type HintCategory = 'flag' | 'continent' | 'neighbors' | 'language';
export interface ActiveHint {
  category: HintCategory;
  text: string;
  imageUrl?: string; // For flag
}

const INITIAL_HINTS_PER_LEVEL = 5;

export const Game: React.FC = () => {
  const [shuffledGameData, setShuffledGameData] = useState<LandmarkData[]>(() => shuffle([...allGameData]));
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [currentLevel, setCurrentLevel] = useState(0);
  const [score, setScore] = useState(0);
  const [revealedCountries, setRevealedCountries] = useState<string[]>([]);
  const [feedback, setFeedback] = useState<{ status: 'correct' | 'incorrect' | null, message: string }>({
    status: null,
    message: ''
  });
  const [gameOver, setGameOver] = useState(false);
  const [levelComplete, setLevelComplete] = useState(false);

  // New Hint States
  const [availableHints, setAvailableHints] = useState(INITIAL_HINTS_PER_LEVEL);
  const [activeHint, setActiveHint] = useState<ActiveHint | null>(null);
  const [shownHintsForCurrentQuestion, setShownHintsForCurrentQuestion] = useState<HintCategory[]>([]);

  const questionsAnsweredBeforeThisLevel = currentLevel > 0 ? cumulativeQuestions[currentLevel - 1] : 0;
  const totalQuestionsInCurrentLevel = LEVEL_CONFIG[currentLevel].count;
  const currentLevelEndIndex = cumulativeQuestions[currentLevel] - 1;
  const currentQuestionNumberInLevel = (currentQuestionIndex - questionsAnsweredBeforeThisLevel) + 1;

  const currentLandmark = shuffledGameData[currentQuestionIndex];

  const canAdvanceToNextLevel = (currentLevel + 1) < LEVEL_CONFIG.length &&
                                allGameData.length >= cumulativeQuestions[currentLevel + 1];

  const advanceQuestionOrLevel = useCallback((isEndOfLevel: boolean) => {
    setActiveHint(null);
    setShownHintsForCurrentQuestion([]);

    if (isEndOfLevel) {
      if (canAdvanceToNextLevel) {
        setLevelComplete(true);
        setAvailableHints(prev => prev + INITIAL_HINTS_PER_LEVEL);
        setCurrentLevel(prevLevel => prevLevel + 1);
        setTimeout(() => {
          setLevelComplete(false);
          setCurrentQuestionIndex(prevIndex => prevIndex + 1);
        }, 2000);
      } else {
        setGameOver(true);
      }
    } else {
      if (currentQuestionIndex + 1 < shuffledGameData.length) {
        setCurrentQuestionIndex(prevIndex => prevIndex + 1);
      } else {
        // No more questions in the entire dataset, even if not end of a configured level
        setGameOver(true);
      }
    }
  }, [canAdvanceToNextLevel, currentQuestionIndex, shuffledGameData.length]);


  const handleCountryClick = (country: string) => {
    if (gameOver || revealedCountries.includes(country) || feedback.status !== null || levelComplete || !currentLandmark) {
      return;
    }

    if (country === currentLandmark.country) {
      setScore(prevScore => prevScore + 1);
      setRevealedCountries(prev => [...prev, country]);
      setFeedback({
        status: 'correct',
        message: `Correct! ${currentLandmark.landmark} is in ${country}.`
      });

      const isEndOfCurrentLevel = currentQuestionIndex === currentLevelEndIndex;
      setTimeout(() => {
        setFeedback({ status: null, message: '' });
        advanceQuestionOrLevel(isEndOfCurrentLevel);
      }, 1500);
    } else {
      setFeedback({
        status: 'incorrect',
        message: `Incorrect. Try again!`
      });
      setTimeout(() => {
        setFeedback({ status: null, message: '' });
      }, 1500);
    }
  };

  const handleHintRequest = () => {
    if (availableHints <= 0 || !currentLandmark || activeHint) {
        return;
    }

    const possibleHints: HintCategory[] = [];
    if (currentLandmark.countryCode && !shownHintsForCurrentQuestion.includes('flag')) possibleHints.push('flag');
    if (currentLandmark.continent && !shownHintsForCurrentQuestion.includes('continent')) possibleHints.push('continent');
    if (currentLandmark.neighbors && currentLandmark.neighbors.length > 0 && !shownHintsForCurrentQuestion.includes('neighbors')) possibleHints.push('neighbors');
    if (currentLandmark.languages && currentLandmark.languages.length > 0 && !shownHintsForCurrentQuestion.includes('language')) possibleHints.push('language');

    if (possibleHints.length === 0) {
        // Optionally inform user: No more new hint types for this landmark.
        // For now, if the button is active but this occurs, it means all known hint types for this landmark were shown.
        // The button's disabled state should ideally catch this earlier.
        console.log("No new hint types available for this landmark (or data missing).");
        return;
    }

    const selectedCategory = possibleHints[Math.floor(Math.random() * possibleHints.length)];
    let hintText = '';
    let hintImageUrl: string | undefined = undefined;

    switch (selectedCategory) {
        case 'flag':
            hintText = `This is the flag of the country.`;
            hintImageUrl = `https://flagsapi.com/${currentLandmark.countryCode}/flat/64.png`;
            break;
        case 'continent':
            hintText = `This landmark is in a country on the continent of ${currentLandmark.continent}.`;
            break;
        case 'neighbors':
            const neighbors = currentLandmark.neighbors || [];
            if (neighbors.length > 0) {
                const neighborsToShow = neighbors.slice(0, 2).join(', ');
                hintText = `This country borders ${neighborsToShow}${neighbors.length > 2 ? ' and others' : ''}.`;
            } else {
                hintText = `This country is an island nation or has no direct land neighbors listed.`;
            }
            break;
        case 'language':
            const languages = currentLandmark.languages || [];
            if (languages.length > 0) {
                const languagesToShow = languages.join(', ');
                hintText = `A primary language spoken here is ${languagesToShow}.`;
            } else {
                 hintText = `Language information is not available for this hint.`;
            }
            break;
    }

    setActiveHint({ category: selectedCategory, text: hintText, imageUrl: hintImageUrl });
    setAvailableHints(prev => prev - 1);
    setShownHintsForCurrentQuestion(prev => [...prev, selectedCategory]);
  };

  const restartGame = () => {
    setShuffledGameData(shuffle([...allGameData]));
    setCurrentQuestionIndex(0);
    setCurrentLevel(0);
    setScore(0);
    setRevealedCountries([]);
    setFeedback({ status: null, message: '' });
    setGameOver(false);
    setLevelComplete(false);
    setAvailableHints(INITIAL_HINTS_PER_LEVEL);
    setActiveHint(null);
    setShownHintsForCurrentQuestion([]);
  };

  useEffect(() => { // Handle case where all questions are answered
    if (currentQuestionIndex >= shuffledGameData.length && !gameOver && !levelComplete) {
        setGameOver(true);
    }
  }, [currentQuestionIndex, shuffledGameData.length, gameOver, levelComplete]);

  if (gameOver) {
    const completedLevelIndex = currentLevel;
    const completedLevelName = LEVEL_CONFIG[completedLevelIndex]?.name || `Level ${completedLevelIndex + 1}`;
    return (
      <div className="w-full max-w-4xl bg-white rounded-2xl shadow-xl overflow-hidden transition-all duration-500 animate-fade-in">
        <div className="p-12 text-center bg-gradient-to-b from-blue-50 to-white">
          <div className="mb-8 flex justify-center">
            <Trophy size={80} className="text-yellow-500 drop-shadow-lg" />
          </div>
          <h1 className="text-4xl md:text-5xl font-bold text-gray-800 mb-6">Game Over!</h1>
          <p className="text-2xl text-gray-600 mb-8">
            You completed {completedLevelName} and scored <span className="font-bold text-blue-600">{score}</span> total points!
          </p>
           {!canAdvanceToNextLevel && LEVEL_CONFIG.length > currentLevel + 1 && allGameData.length < cumulativeQuestions[currentLevel + 1] && (
                <p className="text-lg text-gray-500 mb-8">Add more landmark data to unlock higher levels!</p>
           )}
          <button
            onClick={restartGame}
            className="px-8 py-4 bg-blue-600 text-white text-lg font-medium rounded-xl shadow-lg hover:bg-blue-700 transition-all duration-300 hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            Play Again
          </button>
        </div>
      </div>
    );
  }

   if (levelComplete) {
       return (
            <div className="w-full max-w-4xl bg-white rounded-2xl shadow-xl overflow-hidden transition-all duration-500 animate-fade-in">
                <div className="p-12 text-center bg-gradient-to-b from-green-50 to-white">
                    <h1 className="text-4xl md:text-5xl font-bold text-green-700 mb-6">Level {currentLevel} Complete!</h1>
                    <p className="text-xl text-gray-600">Getting ready for {LEVEL_CONFIG[currentLevel]?.name}...</p>
                </div>
            </div>
       );
   }

   if (!currentLandmark && !gameOver && !levelComplete) { // Handles loading or no more landmarks
    return (
      <div className="w-full max-w-4xl bg-white rounded-2xl shadow-xl p-12 text-center">
        <h1 className="text-3xl font-bold text-gray-700">Loading game or no more landmarks available...</h1>
        <p className="mt-4 text-gray-600">If the game doesn't start, please check the data or refresh.</p>
      </div>
    );
  }


  return (
    <div className="w-full max-w-6xl bg-white rounded-2xl shadow-xl overflow-hidden transition-all duration-500 flex flex-col">
      <div className="flex-grow relative w-full overflow-hidden rounded-t-2xl">
         <Map
          onCountryClick={handleCountryClick}
          revealedCountries={revealedCountries}
          correctCountry={currentLandmark?.country || ''}
         />
      </div>

      <div className="p-8 md:p-10 grid grid-cols-1 md:grid-cols-2 gap-8 items-start"> {/* items-start for alignment */}
        {currentLandmark && (
             <Landmark
                landmark={currentLandmark}
                feedback={feedback}
                activeHint={activeHint}
             />
        )}

        <div className="flex flex-col space-y-6">
          <ScoreBoard
            score={score}
            currentQuestion={currentQuestionNumberInLevel}
            totalQuestions={totalQuestionsInCurrentLevel}
            level={currentLevel + 1}
            availableHints={availableHints}
          />
          {currentLandmark && ( // Only show hint button if there's a current landmark
            <button
              onClick={handleHintRequest}
              disabled={
                availableHints <= 0 || 
                !!activeHint || // Disable if a hint is already active
                !currentLandmark ||
                ( // Check if all possible hint types for this landmark are shown or data is missing
                    (!currentLandmark.countryCode || shownHintsForCurrentQuestion.includes('flag')) &&
                    (!currentLandmark.continent || shownHintsForCurrentQuestion.includes('continent')) &&
                    ((!currentLandmark.neighbors || currentLandmark.neighbors.length === 0) || shownHintsForCurrentQuestion.includes('neighbors')) &&
                    ((!currentLandmark.languages || currentLandmark.languages.length === 0) || shownHintsForCurrentQuestion.includes('language'))
                )
              }
              className="w-full flex items-center justify-center px-6 py-3 bg-yellow-500 text-white font-semibold rounded-lg shadow-md hover:bg-yellow-600 transition-colors duration-200 disabled:bg-gray-400 disabled:text-gray-700 disabled:cursor-not-allowed"
            >
              <HelpCircle size={20} className="mr-2" />
              Get a Hint ({availableHints} left)
            </button>
          )}
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/Landmark.tsx">
import React from 'react';
import { LandmarkData } from '../types';
import { ActiveHint } from './Game'; // Import ActiveHint type
import { MapPin, Flag, Globe2, Languages, MapPinned as NeighborsIcon } from 'lucide-react';

interface LandmarkProps {
  landmark: LandmarkData;
  feedback: { status: 'correct' | 'incorrect' | null, message: string };
  activeHint: ActiveHint | null;
}

const HintIconDisplay: React.FC<{ category: ActiveHint['category'] }> = ({ category }) => {
    switch (category) {
        case 'flag': return <Flag size={18} className="mr-2 text-blue-600 shrink-0" />;
        case 'continent': return <Globe2 size={18} className="mr-2 text-green-600 shrink-0" />;
        case 'neighbors': return <NeighborsIcon size={18} className="mr-2 text-purple-600 shrink-0" />;
        case 'language': return <Languages size={18} className="mr-2 text-red-600 shrink-0" />;
        default: return null;
    }
};

export const Landmark: React.FC<LandmarkProps> = ({ landmark, feedback, activeHint }) => {
  let feedbackClasses = '';
  if (feedback.status === 'correct') {
    feedbackClasses = 'bg-green-100 border-green-500 text-green-700';
  } else if (feedback.status === 'incorrect') {
    feedbackClasses = 'bg-red-100 border-red-500 text-red-700';
  }

  return (
    <div className="relative flex flex-col h-full">
      <div className="relative overflow-hidden rounded-lg h-[200px] md:h-[300px] bg-gray-100">
        <img
          src={landmark.imageUrl}
          alt={`Landmark: ${landmark.landmark}`}
          className="w-full h-full object-cover"
        />
        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4">
          <div className="flex items-center text-white">
            <MapPin size={20} className="mr-2" />
            <h3 className="text-lg font-semibold">{landmark.landmark}</h3>
          </div>
        </div>
      </div>
      
      <div className="mt-4 flex-grow flex flex-col"> {/* flex-grow and flex-col */}
        <h3 className="text-xl font-semibold text-gray-800 mb-2">Which country is this landmark in?</h3>
        
        <div className="flex-grow"> {/* This div will take up remaining space for hint/feedback */}
            {activeHint && (
              <div className="mt-3 p-3 border border-blue-400 bg-blue-50 rounded-lg transition-all duration-300 animate-fade-in">
                <div className="flex items-start mb-1"> {/* items-start for multiline text */}
                    <HintIconDisplay category={activeHint.category} />
                    <strong className="text-blue-700">Hint: {activeHint.category.charAt(0).toUpperCase() + activeHint.category.slice(1)}</strong>
                </div>
                {activeHint.imageUrl && (
                  <img 
                    src={activeHint.imageUrl} 
                    alt={`${activeHint.category} hint`} 
                    className="my-2 h-12 border border-gray-300" 
                    onError={(e) => (e.currentTarget.style.display = 'none')} // Hide if flag image fails
                  />
                )}
                <p className="text-sm text-gray-700 pl-7"> {/* Indent text to align with title if icon present */}
                  {activeHint.text}
                </p>
              </div>
            )}

            {feedback.message && !activeHint && (
              <div className={`mt-4 p-3 border rounded-lg ${feedbackClasses} transition-all duration-300 animate-fade-in`}>
                {feedback.message}
              </div>
            )}
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/components/Map.tsx">
import React, { useState, useEffect, useRef } from 'react';
import { geoMercator, geoPath } from 'd3-geo';
import { feature } from 'topojson-client';
import { CountryFeature } from '../types';
import { ZoomIn, ZoomOut, Maximize2, Search, X } from 'lucide-react'; // Added Search and X icons

interface MapProps {
  onCountryClick: (country: string) => void;
  revealedCountries: string[];
  correctCountry: string;
}

const WORLD_TOPOJSON_URL = 'https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json';

export const Map: React.FC<MapProps> = ({
  onCountryClick,
  revealedCountries,
  correctCountry
}) => {
  const [worldData, setWorldData] = useState<CountryFeature[] | null>(null);
  const [hoveredCountry, setHoveredCountry] = useState<string | null>(null);
  const [scale, setScale] = useState(120);
  const svgRef = useRef<SVGSVGElement>(null);

  // New state for search
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [searchedCountryFeature, setSearchedCountryFeature] = useState<CountryFeature | null>(null);

  useEffect(() => {
    fetch(WORLD_TOPOJSON_URL)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(topology => {
        if (!topology.objects || !topology.objects.countries) {
           console.error("TopoJSON does not contain 'countries' object.");
           setWorldData([]);
           return;
        }
        const countries = feature(topology, topology.objects.countries);
        setWorldData(countries.features as CountryFeature[]);
      })
      .catch(error => {
        console.error("Error loading world map data:", error);
        setWorldData([]);
      });
  }, []);

  const width = 800;
  const height = 400;

  const handleZoomIn = () => setScale(prev => Math.min(prev * 1.3, 800));
  const handleZoomOut = () => setScale(prev => Math.max(prev / 1.3, 80));
  const handleReset = () => {
    setScale(120);
    setSearchTerm(''); // Also reset search on map reset
    setSearchedCountryFeature(null);
  };

  const projection = geoMercator()
    .scale(scale)
    .translate([width / 2, height / 1.5]);

  const pathGenerator = geoPath().projection(projection); // Renamed for clarity

  // Handle search input change
  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const term = event.target.value;
    setSearchTerm(term);

    if (term.trim() === '') {
      setSearchedCountryFeature(null);
      return;
    }

    if (worldData) {
      const found = worldData.find(
        (country) => country.properties.name.toLowerCase().includes(term.toLowerCase())
      );
      setSearchedCountryFeature(found || null);
    }
  };

  const clearSearch = () => {
    setSearchTerm('');
    setSearchedCountryFeature(null);
  };

  // --- RENDER LOGIC ---

  if (!worldData) {
     return (
      <div className="relative w-full h-[400px] md:h-[500px] rounded-t-2xl overflow-hidden bg-gradient-to-b from-blue-50 to-white shadow-lg flex items-center justify-center text-gray-600">
         Loading map...
      </div>
     );
  }

  if (worldData.length === 0) {
     return (
      <div className="relative w-full h-[400px] md:h-[500px] rounded-t-2xl overflow-hidden bg-gradient-to-b from-blue-50 to-white shadow-lg flex items-center justify-center text-red-600">
         Error loading map data.
      </div>
     );
  }

  return (
    <div className="relative w-full h-full overflow-hidden bg-gradient-to-b from-blue-50 to-white">
      {/* Controls, Title, and Search Bar */}
      <div className="absolute top-0 left-0 right-0 p-4 z-10 space-y-3">
        <div className="flex justify-between items-start">
          <h2 className="text-xl font-semibold text-gray-800 drop-shadow">
            Click on the correct country
          </h2>
          <div className="flex gap-2">
            <button
              onClick={handleZoomIn}
              className="p-2 bg-white rounded-lg shadow-sm hover:bg-gray-50 transition-colors"
              title="Zoom in" aria-label="Zoom in"
            >
              <ZoomIn size={20} className="text-gray-600" />
            </button>
            <button
              onClick={handleZoomOut}
              className="p-2 bg-white rounded-lg shadow-sm hover:bg-gray-50 transition-colors"
              title="Zoom out" aria-label="Zoom out"
            >
              <ZoomOut size={20} className="text-gray-600" />
            </button>
            <button
              onClick={handleReset}
              className="p-2 bg-white rounded-lg shadow-sm hover:bg-gray-50 transition-colors"
              title="Reset view" aria-label="Reset view"
            >
              <Maximize2 size={20} className="text-gray-600" />
            </button>
          </div>
        </div>
        
        {/* Search Bar */}
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Search size={18} className="text-gray-400" />
          </div>
          <input
            type="text"
            placeholder="Search for a country..."
            value={searchTerm}
            onChange={handleSearchChange}
            className="w-full sm:w-auto md:max-w-xs p-2 pl-10 pr-8 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-shadow"
            aria-label="Search for a country"
          />
          {searchTerm && (
            <button
              onClick={clearSearch}
              className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-500 hover:text-gray-700"
              aria-label="Clear search"
            >
              <X size={18} />
            </button>
          )}
        </div>
      </div>

      {/* SVG Container */}
      <div className="relative w-full h-full overflow-hidden pt-28"> {/* Added padding-top to avoid overlap with controls */}
        <svg
          ref={svgRef}
          viewBox={`0 0 ${width} ${height}`}
          className="w-full h-full"
        >
          {worldData.map((country, i) => {
            const countryName = country.properties.name;
            const isRevealed = revealedCountries.includes(countryName);
            const isHovered = hoveredCountry === countryName;
            const isSearched = searchedCountryFeature?.properties.name === countryName;

            let fill = '#e5e7eb'; // Tailwind gray-200
            if (isRevealed) {
              fill = '#22c55e'; // Tailwind green-500
            } else if (isSearched) {
              fill = '#f59e0b'; // Tailwind amber-500 (for searched country)
            } else if (isHovered) {
              fill = '#60a5fa'; // Tailwind blue-400
            }

            return (
              <path
                key={i} // Consider using a more stable ID if available from TopoJSON properties
                d={pathGenerator(country) || ''}
                fill={fill}
                stroke="#fff"
                strokeWidth="0.5"
                className="transition-colors duration-200 cursor-pointer hover:opacity-80"
                onClick={() => {
                  onCountryClick(countryName);
                  clearSearch(); // Clear search when a country is clicked for guessing
                }}
                onMouseEnter={() => setHoveredCountry(countryName)}
                onMouseLeave={() => setHoveredCountry(null)}
                aria-label={countryName}
              />
            );
          })}
        </svg>
      </div>

      {/* Hovered Country Tooltip */}
      {hoveredCountry && 
       !revealedCountries.includes(hoveredCountry) &&
       searchedCountryFeature?.properties.name !== hoveredCountry && // Don't show hover tooltip if it's the searched one (optional)
        (
        <div className="absolute bottom-6 left-6 bg-black bg-opacity-75 text-white text-sm px-4 py-2 rounded-full shadow-lg backdrop-blur-sm z-20">
          {hoveredCountry}
        </div>
      )}
       {/* Searched Country Name (Optional display) */}
       {searchedCountryFeature && (
         <div className="absolute bottom-6 right-6 bg-amber-500 text-white text-sm px-4 py-2 rounded-full shadow-lg z-20">
           Found: {searchedCountryFeature.properties.name}
         </div>
       )}
    </div>
  );
};
</file>

<file path="src/components/ScoreBoard.tsx">
import React from 'react';
import { Globe, HelpCircle } from 'lucide-react';

interface ScoreBoardProps {
  score: number;
  totalQuestions: number;
  currentQuestion: number;
  level: number;
  availableHints: number;
}

// Re-creating Tailwind styles with JS objects (as per original file)
// Consider migrating to Tailwind classes directly in JSX for better maintainability
const containerStyle: React.CSSProperties = {
    backgroundColor: '#1d4ed8', // blue-700
    color: '#fff',
    padding: '1rem', // p-4
    borderRadius: '0.5rem', // rounded-lg
    boxShadow: '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06)', // shadow-md
    width: '100%',
    boxSizing: 'border-box',
};

const flexRowBetweenCenter: React.CSSProperties = {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '100%',
};

const flexCenter: React.CSSProperties = {
    display: 'flex',
    alignItems: 'center',
};

const globeIconStyle: React.CSSProperties = {
    marginRight: '0.75rem', // mr-3
    opacity: 0.9,
};

const titleAndLevelStyle: React.CSSProperties = {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
};

const titleStyle: React.CSSProperties = {
    fontSize: '1.25rem', // text-xl
    fontWeight: 'bold',
};

const levelStyle: React.CSSProperties = {
    fontSize: '0.875rem', // text-sm
    fontWeight: '500', // font-medium
    opacity: 0.9,
    marginTop: '0.25rem',
};

const rightSectionStyle: React.CSSProperties = {
    display: 'flex',
    alignItems: 'center',
    gap: '1rem', // Reduced gap for more items space-x-4
    color: 'rgba(255, 255, 255, 0.9)',
};

const textCenterStyle: React.CSSProperties = {
    textAlign: 'center',
};

const labelStyle: React.CSSProperties = {
    fontSize: '0.75rem', // text-xs for smaller labels
    textTransform: 'uppercase',
    fontWeight: '500',
    opacity: 0.8,
    display: 'block', // Ensure it's block for centering
};

const valueStyle: React.CSSProperties = {
    fontSize: '1.125rem', // text-lg
    fontWeight: 'bold',
};

const hintIconStyle: React.CSSProperties = {
    opacity: 0.8,
    marginRight: '0.25rem', // mr-1
};


export const ScoreBoard: React.FC<ScoreBoardProps> = ({
  score,
  totalQuestions,
  currentQuestion,
  level,
  availableHints
}) => {
  return (
    <div style={containerStyle}>
      <div style={flexRowBetweenCenter}>
        <div style={flexCenter}>
           <Globe size={28} style={globeIconStyle} />
           <div style={titleAndLevelStyle}>
             <h1 style={titleStyle}>Country Landmark Challenge</h1>
             <p style={levelStyle}>Level {level}</p>
           </div>
        </div>

        <div style={rightSectionStyle}>
          <div style={textCenterStyle}>
            <p style={labelStyle}>Question</p>
            <p style={valueStyle}>{currentQuestion} / {totalQuestions}</p>
          </div>
          <div style={textCenterStyle}>
            <p style={labelStyle}>Score</p>
            <p style={valueStyle}>{score}</p>
          </div>
          {/* Hints Display */}
          <div style={textCenterStyle}>
             <p style={labelStyle}>
                Hints
            </p>
            <p style={valueStyle}>{availableHints}</p>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="src/data/gameData.ts">
// src/data/gameData.ts
import { LandmarkData } from '../types';

export const gameData: LandmarkData[] = [
  // --- Level 1 Data (Original 10) ---
  {
    id: 1,
    landmark: 'Eiffel Tower',
    country: 'France',
    countryCode: 'FR',
    imageUrl: 'https://images.pexels.com/photos/460740/pexels-photo-460740.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    continent: 'Europe',
    neighbors: ['Germany', 'Spain', 'Italy', 'Switzerland', 'Belgium', 'Luxembourg'],
    languages: ['French'],
  },
  {
    id: 2,
    landmark: 'Statue of Liberty',
    country: 'United States of America',
    countryCode: 'US',
    imageUrl: 'https://images.pexels.com/photos/356844/pexels-photo-356844.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'North America',
    neighbors: ['Canada', 'Mexico'],
    languages: ['English'],
  },
  {
    id: 3,
    landmark: 'Taj Mahal',
    country: 'India',
    countryCode: 'IN',
    imageUrl: 'https://images.pexels.com/photos/1603650/pexels-photo-1603650.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Asia',
    neighbors: ['Pakistan', 'China', 'Nepal', 'Bhutan', 'Bangladesh', 'Myanmar'],
    languages: ['Hindi', 'English'],
  },
  {
    id: 4,
    landmark: 'Great Wall',
    country: 'China',
    countryCode: 'CN',
    imageUrl: 'https://images.pexels.com/photos/2412603/pexels-photo-2412603.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    continent: 'Asia',
    neighbors: ['Russia', 'Mongolia', 'North Korea', 'Vietnam', 'India'], // Selected few
    languages: ['Mandarin Chinese'],
  },
  {
    id: 5,
    landmark: 'Colosseum',
    country: 'Italy',
    countryCode: 'IT',
    imageUrl: 'https://images.pexels.com/photos/532263/pexels-photo-532263.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Europe',
    neighbors: ['France', 'Switzerland', 'Austria', 'Slovenia'],
    languages: ['Italian'],
  },
  {
    id: 6,
    landmark: 'Christ the Redeemer',
    country: 'Brazil',
    countryCode: 'BR',
    imageUrl: 'https://images.pexels.com/photos/2818895/pexels-photo-2818895.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    continent: 'South America',
    neighbors: ['Argentina', 'Bolivia', 'Colombia', 'Paraguay', 'Peru', 'Uruguay', 'Venezuela'], // Selected
    languages: ['Portuguese'],
  },
  {
    id: 7,
    landmark: 'Machu Picchu',
    country: 'Peru',
    countryCode: 'PE',
    imageUrl: 'https://images.pexels.com/photos/2929906/pexels-photo-2929906.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    continent: 'South America',
    neighbors: ['Ecuador', 'Colombia', 'Brazil', 'Bolivia', 'Chile'],
    languages: ['Spanish', 'Quechua'],
  },
  {
    id: 8,
    landmark: 'Pyramids of Giza',
    country: 'Egypt',
    countryCode: 'EG',
    imageUrl: 'https://images.pexels.com/photos/7566890/pexels-photo-7566890.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    continent: 'Africa', // Straddles Africa and Asia (Sinai)
    neighbors: ['Libya', 'Sudan', 'Israel'], // Gaza Strip omitted for simplicity as a hint
    languages: ['Arabic'],
  },
  {
    id: 9,
    landmark: 'Sydney Opera House',
    country: 'Australia',
    countryCode: 'AU',
    imageUrl: 'https://images.pexels.com/photos/1878293/pexels-photo-1878293.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Oceania',
    neighbors: [], // Island nation
    languages: ['English'],
  },
  {
    id: 10,
    landmark: 'Big Ben',
    country: 'United Kingdom',
    countryCode: 'GB',
    imageUrl: 'https://images.pexels.com/photos/77171/pexels-photo-77171.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Europe',
    neighbors: ['Ireland'], // Land border
    languages: ['English'],
  },

  // --- Level 2 Data (25 New Entries) ---
  {
    id: 11,
    landmark: 'Brandenburg Gate',
    country: 'Germany',
    countryCode: 'DE',
    imageUrl: 'https://images.pexels.com/photos/2570063/pexels-photo-2570063.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    continent: 'Europe',
    neighbors: ['Poland', 'Czech Republic', 'Austria', 'Switzerland', 'France', 'Netherlands', 'Denmark'], // Selected
    languages: ['German'],
  },
  {
    id: 12,
    landmark: 'Sagrada Familia',
    country: 'Spain',
    countryCode: 'ES',
    imageUrl: 'https://images.pexels.com/photos/819764/pexels-photo-819764.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2',
    continent: 'Europe',
    neighbors: ['France', 'Portugal', 'Andorra'],
    languages: ['Spanish', 'Catalan'],
  },
  {
    id: 13,
    landmark: 'CN Tower',
    country: 'Canada',
    countryCode: 'CA',
    imageUrl: 'https://images.pexels.com/photos/21389/pexels-photo.jpg?auto=compress&cs=tinysrgb&w=600',
    continent: 'North America',
    neighbors: ['United States of America'],
    languages: ['English', 'French'],
  },
  {
    id: 14,
    landmark: 'Chichen Itza',
    country: 'Mexico',
    countryCode: 'MX',
    imageUrl: 'https://images.pexels.com/photos/3591074/pexels-photo-3591074.jpeg?auto=compress&cs=tinysrgb&w=600',
    continent: 'North America',
    neighbors: ['United States of America', 'Guatemala', 'Belize'],
    languages: ['Spanish'],
  },
  {
    id: 15,
    landmark: 'Fushimi Inari Shrine',
    country: 'Japan',
    countryCode: 'JP',
    imageUrl: 'https://images.pexels.com/photos/19474885/pexels-photo-19474885/free-photo-of-gyeongbokgung-palace-in-seoul.jpeg?auto=compress&cs=tinysrgb&w=600', // Original: Gyeongbokgung Palace. You might want a Fushimi Inari image.
    continent: 'Asia',
    neighbors: [], // Island nation
    languages: ['Japanese'],
  },
   {
    id: 16,
    landmark: 'Gyeongbokgung Palace',
    country: 'South Korea',
    countryCode: 'KR',
    imageUrl: 'https://images.pexels.com/photos/2081345/pexels-photo-2081345.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Asia',
    neighbors: ['North Korea'],
    languages: ['Korean'],
  },
   {
    id: 17,
    landmark: 'Wat Arun',
    country: 'Thailand',
    countryCode: 'TH',
    imageUrl: 'https://images.pexels.com/photos/11104877/pexels-photo-11104877.jpeg?auto=compress&cs=tinysrgb&w=600',
    continent: 'Asia',
    neighbors: ['Myanmar', 'Laos', 'Cambodia', 'Malaysia'],
    languages: ['Thai'],
  },
   {
    id: 18,
    landmark: 'Hagia Sophia',
    country: 'Turkey',
    countryCode: 'TR',
    imageUrl: 'https://images.pexels.com/photos/31979451/pexels-photo-31979451/free-photo-of-inside-hagia-sophia-with-people-and-chandelier.jpeg?auto=compress&cs=tinysrgb&w=600', // Original: Generic interior. You might want an exterior Hagia Sophia image.
    continent: 'Asia', // Straddles Europe and Asia
    neighbors: ['Greece', 'Bulgaria', 'Georgia', 'Armenia', 'Iran', 'Iraq', 'Syria'], // Azerbaijan (Nakhchivan) omitted for brevity
    languages: ['Turkish'],
  },
   {
    id: 19,
    landmark: 'Acropolis of Athens',
    country: 'Greece',
    countryCode: 'GR',
    imageUrl: 'https://images.pexels.com/photos/14557270/pexels-photo-14557270.jpeg?auto=compress&cs=tinysrgb&w=600',
    continent: 'Europe',
    neighbors: ['Albania', 'North Macedonia', 'Bulgaria', 'Turkey'],
    languages: ['Greek'],
  },
   {
    id: 20,
    landmark: 'Kinderdijk Windmills',
    country: 'Netherlands',
    countryCode: 'NL',
    imageUrl: 'https://images.pexels.com/photos/313746/pexels-photo-313746.jpeg?auto=compress&cs=tinysrgb&w=600',
    continent: 'Europe',
    neighbors: ['Germany', 'Belgium'],
    languages: ['Dutch'],
  },
   {
    id: 21,
    landmark: 'Matterhorn',
    country: 'Switzerland', // Straddles SWI/ITA border, but listed as Switzerland in gameData
    countryCode: 'CH',
    imageUrl: 'https://images.pexels.com/photos/267104/pexels-photo-267104.jpeg?auto=compress&cs=tinysrgb&w=600',
    continent: 'Europe',
    neighbors: ['France', 'Germany', 'Italy', 'Austria', 'Liechtenstein'],
    languages: ['German', 'French', 'Italian', 'Romansh'],
  },
   {
    id: 22,
    landmark: 'Milford Sound',
    country: 'New Zealand',
    countryCode: 'NZ',
    imageUrl: 'https://images.pexels.com/photos/4444290/pexels-photo-4444290.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Oceania',
    neighbors: [], // Island nation
    languages: ['English', 'Māori'],
  },
   {
    id: 23,
    landmark: 'Table Mountain',
    country: 'South Africa',
    countryCode: 'ZA',
    imageUrl: 'https://images.pexels.com/photos/259447/pexels-photo-259447.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Africa',
    neighbors: ['Namibia', 'Botswana', 'Zimbabwe', 'Mozambique', 'Eswatini', 'Lesotho'],
    languages: ['Afrikaans', 'English', 'Zulu', 'Xhosa'], // Many official
  },
   {
    id: 24,
    landmark: 'Maasai Mara', // National Reserve in Kenya
    country: 'Kenya',
    countryCode: 'KE',
    imageUrl: 'https://images.pexels.com/photos/12334810/pexels-photo-12334810.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Africa',
    neighbors: ['Tanzania', 'Uganda', 'South Sudan', 'Ethiopia', 'Somalia'],
    languages: ['Swahili', 'English'],
  },
   {
    id: 25,
    landmark: 'Perito Moreno Glacier',
    country: 'Argentina',
    countryCode: 'AR',
    imageUrl: 'https://images.pexels.com/photos/4346849/pexels-photo-4346849.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'South America',
    neighbors: ['Bolivia', 'Brazil', 'Chile', 'Paraguay', 'Uruguay'],
    languages: ['Spanish'],
  },
   {
    id: 26,
    landmark: 'Moai (Easter Island)',
    country: 'Chile', // Easter Island is a special territory of Chile
    countryCode: 'CL',
    imageUrl: 'https://images.pexels.com/photos/14596489/pexels-photo-14596489.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'South America', // Chile is in SA, though Easter Island is in Oceania
    neighbors: ['Argentina', 'Bolivia', 'Peru'],
    languages: ['Spanish'],
  },
   {
    id: 27,
    landmark: 'St. Basil\'s Cathedral',
    country: 'Russia',
    countryCode: 'RU',
    imageUrl: 'https://images.pexels.com/photos/8285167/pexels-photo-8285167.jpeg?auto=compress&cs=tinysrgb&w=300',
    continent: 'Europe', // Moscow is in Europe
    neighbors: ['Norway', 'Finland', 'Estonia', 'Latvia', 'Lithuania', 'Poland', 'Belarus', 'Ukraine', 'Georgia', 'Azerbaijan', 'Kazakhstan', 'China', 'Mongolia', 'North Korea'], // Very many; selected a few for hints.
    languages: ['Russian'],
  },
   {
    id: 28,
    landmark: 'Geirangerfjord',
    country: 'Norway',
    countryCode: 'NO',
    imageUrl: 'https://images.pexels.com/photos/6272372/pexels-photo-6272372.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Europe',
    neighbors: ['Sweden', 'Finland', 'Russia'],
    languages: ['Norwegian'],
  },
   {
    id: 29,
    landmark: 'Blue Lagoon',
    country: 'Iceland',
    countryCode: 'IS',
    imageUrl: 'https://images.pexels.com/photos/2253821/pexels-photo-2253821.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Europe',
    neighbors: [], // Island nation
    languages: ['Icelandic'],
  },
   {
    id: 30,
    landmark: 'Cliffs of Moher',
    country: 'Ireland',
    countryCode: 'IE',
    imageUrl: 'https://images.pexels.com/photos/2382681/pexels-photo-2382681.jpeg?auto=compress&cs=tinysrgb&w=300',
    continent: 'Europe',
    neighbors: ['United Kingdom (Northern Ireland)'], // Land border
    languages: ['Irish', 'English'],
  },
   {
    id: 31,
    landmark: 'Belém Tower',
    country: 'Portugal',
    countryCode: 'PT',
    imageUrl: 'https://images.pexels.com/photos/461936/pexels-photo-461936.jpeg?auto=compress&cs=tinysrgb&w=300',
    continent: 'Europe',
    neighbors: ['Spain'],
    languages: ['Portuguese'],
  },
   {
    id: 32,
    landmark: 'Wawel Castle',
    country: 'Poland',
    countryCode: 'PL',
    imageUrl: 'https://images.pexels.com/photos/27034310/pexels-photo-27034310/free-photo-of-tower-of-traditional-castle.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', // Original: Generic tower. You might want a Wawel Castle image.
    continent: 'Europe',
    neighbors: ['Germany', 'Czech Republic', 'Slovakia', 'Ukraine', 'Belarus', 'Lithuania', 'Russia (Kaliningrad)'],
    languages: ['Polish'],
  },
   {
    id: 33,
    landmark: 'Vasa Museum',
    country: 'Sweden',
    countryCode: 'SE',
    imageUrl: 'https://images.pexels.com/photos/31979451/pexels-photo-31979451/free-photo-of-inside-hagia-sophia-with-people-and-chandelier.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1', // Original: Same as Hagia Sophia. You might want a Vasa Museum image.
    continent: 'Europe',
    neighbors: ['Norway', 'Finland'],
    languages: ['Swedish'],
  },
   {
    id: 34,
    landmark: 'Schönbrunn Palace',
    country: 'Austria',
    countryCode: 'AT',
    imageUrl: 'https://images.pexels.com/photos/389865/pexels-photo-389865.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Europe',
    neighbors: ['Germany', 'Czech Republic', 'Slovakia', 'Hungary', 'Slovenia', 'Italy', 'Switzerland', 'Liechtenstein'],
    languages: ['German'],
  },
   {
    id: 35,
    landmark: 'Borobudur Temple',
    country: 'Indonesia',
    countryCode: 'ID',
    imageUrl: 'https://images.pexels.com/photos/8775531/pexels-photo-8775531.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1',
    continent: 'Asia',
    neighbors: ['Malaysia (on Borneo)', 'Papua New Guinea', 'Timor-Leste'],
    languages: ['Indonesian'],
  },
];
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);
</file>

<file path="src/types/index.ts">
export interface LandmarkData {
  id: number;
  landmark: string;
  country: string;
  countryCode: string; // ISO 3166-1 alpha-2 code (e.g., "FR", "US")
  imageUrl: string;
  // hint?: string; // Deprecated or use as a general fallback if new hint types are missing

  // New Hint Fields
  continent?: string;
  neighbors?: string[]; // Array of neighboring country names
  languages?: string[]; // Array of primary languages
}

export interface CountryData {
  id: number;
  name: string;
  position: {
    x: number;
    y: number;
  };
  size: number;
}

export interface CountryFeature {
  type: string;
  properties: {
    name: string;
  };
  geometry: {
    type: string;
    coordinates: number[][][]; // Or any for more complex geometries
  };
}
</file>

<file path="src/utils/helpers.ts">
/**
 * Shuffle an array using the Fisher-Yates algorithm
 */
export function shuffle<T>(array: T[]): T[] {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    // Remove 'lucide-react' from exclude, or if it's the only one,
    // you can remove the exclude array or the entire optimizeDeps section
    // if this was its only purpose.
    // For example:
    // exclude: [], // if you have other exclusions you want to keep
    // OR, if lucide-react was the only one:
  },
  // If optimizeDeps was only for excluding lucide-react, you can remove
  // the optimizeDeps key entirely:
  // optimizeDeps: {}, // or just remove the key
});
</file>

<file path="vite.config.ts.timestamp-1746989700046-e81f6865a28918.mjs">
// vite.config.ts
import { defineConfig } from "file:///home/project/node_modules/vite/dist/node/index.js";
import react from "file:///home/project/node_modules/@vitejs/plugin-react/dist/index.mjs";
var vite_config_default = defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ["lucide-react"]
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvaG9tZS9wcm9qZWN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9wcm9qZWN0L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9ob21lL3Byb2plY3Qvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJztcbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCc7XG5cbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBwbHVnaW5zOiBbcmVhY3QoKV0sXG4gIG9wdGltaXplRGVwczoge1xuICAgIGV4Y2x1ZGU6IFsnbHVjaWRlLXJlYWN0J10sXG4gIH0sXG59KTtcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBeU4sU0FBUyxvQkFBb0I7QUFDdFAsT0FBTyxXQUFXO0FBR2xCLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFBQSxFQUNqQixjQUFjO0FBQUEsSUFDWixTQUFTLENBQUMsY0FBYztBQUFBLEVBQzFCO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
</file>

<file path="package.json">
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "d3-geo": "^3.1.0",
    "d3-selection": "^3.0.0",
    "d3-zoom": "^3.0.0",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "topojson-client": "^3.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/d3-geo": "^3.1.0",
    "@types/d3-selection": "^3.0.11",
    "@types/d3-zoom": "^3.0.8",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@types/topojson-client": "^3.1.4",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  },
  "engines": {
    "node": ">=18"
  }
}
</file>

</files>
